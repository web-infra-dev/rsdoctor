import { summary } from '@actions/core';
import * as fs from 'fs';

export interface SizeData {
  totalSize: number;
  files: Array<{
    path: string;
    size: number;
    gzipSize?: number;
    brotliSize?: number;
  }>;
}

/**
 * Format bytes to human readable string
 */
function formatBytes(bytes: number): string {
  if (bytes === 0) return '0 B';

  const k = 1024;
  const sizes = ['B', 'KB', 'MB', 'GB'];
  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return `${(bytes / Math.pow(k, i)).toFixed(1)} ${sizes[i]}`;
}

/**
 * Default demo baseline data
 */
const DEFAULT_DEMO_DATA: SizeData = {
  totalSize: 103809024,
  files: [
    {
      path: 'dist/main.js',
      size: 51380224,
      gzipSize: 10276045,
      brotliSize: 8220836,
    },
    {
      path: 'dist/vendor.js',
      size: 41943040,
      gzipSize: 8388608,
      brotliSize: 6291456,
    },
    {
      path: 'dist/styles.css',
      size: 10485760,
      gzipSize: 2097152,
      brotliSize: 1572864,
    },
  ],
};

/**
 * Load size data from JSON file
 */
export function loadSizeData(filePath: string): SizeData | null {
  try {
    if (!fs.existsSync(filePath)) {
      console.log(`Size data file not found: ${filePath}`);
      return null;
    }

    const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));

    // Calculate total size if not provided
    if (!data.totalSize && data.files) {
      data.totalSize = data.files.reduce(
        (sum: number, file: any) => sum + (file.size || 0),
        0,
      );
    }

    return data;
  } catch (error) {
    console.error(`Failed to load size data from ${filePath}:`, error);
    return null;
  }
}

/**
 * Get demo baseline data
 */
export function getDemoBaselineData(): SizeData {
  return { ...DEFAULT_DEMO_DATA };
}

/**
 * Generate bundle size report card for GitHub Actions summary
 */
export async function generateSizeReport(
  current: SizeData,
  baseline?: SizeData,
): Promise<void> {
  // Start building the summary
  await summary.addHeading('📦 Bundle Size Report', 2).addSeparator();

  // Create size report card
  const reportTable = [
    [
      { data: 'Metric', header: true },
      { data: 'Current', header: true },
      { data: 'Baseline', header: true },
    ],
    [
      { data: '📊 Total Size', header: false },
      { data: formatBytes(current.totalSize), header: false },
      {
        data: baseline ? formatBytes(baseline.totalSize) : 'N/A',
        header: false,
      },
    ],
    [
      { data: '📁 Files Count', header: false },
      {
        data: current.files ? current.files.length.toString() : '0',
        header: false,
      },
      {
        data: baseline?.files ? baseline.files.length.toString() : 'N/A',
        header: false,
      },
    ],
  ];

  await summary.addTable(reportTable).addSeparator();

  // Add file details if available
  if (current.files && current.files.length > 0) {
    await summary.addHeading('📄 File Details', 3);

    const fileTable = [
      [
        { data: 'File', header: true },
        { data: 'Size', header: true },
      ],
    ];

    for (const file of current.files) {
      fileTable.push([
        { data: file.path, header: false },
        { data: formatBytes(file.size), header: false },
      ]);
    }

    await summary.addTable(fileTable);
  }

  // Add footer
  await summary
    .addSeparator()
    .addRaw('<sub>Generated by Bundle Size Action</sub>');

  // Write the summary
  await summary.write();

  console.log('✅ Bundle size report card generated successfully');
}
